# GENETARED BY NNDCT, DO NOT EDIT!

import torch
from torch import tensor
import pytorch_nndct as py_nndct

class DetectMultiBackend(py_nndct.nn.NndctQuantModel):
    def __init__(self):
        super(DetectMultiBackend, self).__init__()
        self.module_0 = py_nndct.nn.Input() #DetectMultiBackend::input_0(DetectMultiBackend::nndct_input_0)
        self.module_1 = py_nndct.nn.Conv2d(in_channels=3, out_channels=48, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[0]/Conv2d[conv]/ret.3(DetectMultiBackend::nndct_conv2d_1)
        self.module_2 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[0]/LeakyReLU[act]/14742(DetectMultiBackend::nndct_leaky_relu_2)
        self.module_3 = py_nndct.nn.Conv2d(in_channels=48, out_channels=96, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[1]/Conv2d[conv]/ret.5(DetectMultiBackend::nndct_conv2d_3)
        self.module_4 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[1]/LeakyReLU[act]/14764(DetectMultiBackend::nndct_leaky_relu_4)
        self.module_5 = py_nndct.nn.Conv2d(in_channels=96, out_channels=48, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Conv[cv1]/Conv2d[conv]/ret.7(DetectMultiBackend::nndct_conv2d_5)
        self.module_6 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Conv[cv1]/LeakyReLU[act]/14786(DetectMultiBackend::nndct_leaky_relu_6)
        self.module_7 = py_nndct.nn.Conv2d(in_channels=48, out_channels=48, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Sequential[m]/Bottleneck[0]/Conv[cv1]/Conv2d[conv]/ret.9(DetectMultiBackend::nndct_conv2d_7)
        self.module_8 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Sequential[m]/Bottleneck[0]/Conv[cv1]/LeakyReLU[act]/14808(DetectMultiBackend::nndct_leaky_relu_8)
        self.module_9 = py_nndct.nn.Conv2d(in_channels=48, out_channels=48, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Sequential[m]/Bottleneck[0]/Conv[cv2]/Conv2d[conv]/ret.11(DetectMultiBackend::nndct_conv2d_9)
        self.module_10 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Sequential[m]/Bottleneck[0]/Conv[cv2]/LeakyReLU[act]/14830(DetectMultiBackend::nndct_leaky_relu_10)
        self.module_11 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Sequential[m]/Bottleneck[0]/ret.13(DetectMultiBackend::nndct_elemwise_add_11)
        self.module_12 = py_nndct.nn.Conv2d(in_channels=48, out_channels=48, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Sequential[m]/Bottleneck[1]/Conv[cv1]/Conv2d[conv]/ret.15(DetectMultiBackend::nndct_conv2d_12)
        self.module_13 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Sequential[m]/Bottleneck[1]/Conv[cv1]/LeakyReLU[act]/14855(DetectMultiBackend::nndct_leaky_relu_13)
        self.module_14 = py_nndct.nn.Conv2d(in_channels=48, out_channels=48, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Sequential[m]/Bottleneck[1]/Conv[cv2]/Conv2d[conv]/ret.17(DetectMultiBackend::nndct_conv2d_14)
        self.module_15 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Sequential[m]/Bottleneck[1]/Conv[cv2]/LeakyReLU[act]/14877(DetectMultiBackend::nndct_leaky_relu_15)
        self.module_16 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Sequential[m]/Bottleneck[1]/ret.19(DetectMultiBackend::nndct_elemwise_add_16)
        self.module_17 = py_nndct.nn.Conv2d(in_channels=96, out_channels=48, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Conv[cv2]/Conv2d[conv]/ret.21(DetectMultiBackend::nndct_conv2d_17)
        self.module_18 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Conv[cv2]/LeakyReLU[act]/14902(DetectMultiBackend::nndct_leaky_relu_18)
        self.module_19 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/ret.23(DetectMultiBackend::nndct_concat_19)
        self.module_20 = py_nndct.nn.Conv2d(in_channels=96, out_channels=96, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Conv[cv3]/Conv2d[conv]/ret.25(DetectMultiBackend::nndct_conv2d_20)
        self.module_21 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Conv[cv3]/LeakyReLU[act]/14928(DetectMultiBackend::nndct_leaky_relu_21)
        self.module_22 = py_nndct.nn.Conv2d(in_channels=96, out_channels=192, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[3]/Conv2d[conv]/ret.27(DetectMultiBackend::nndct_conv2d_22)
        self.module_23 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[3]/LeakyReLU[act]/14950(DetectMultiBackend::nndct_leaky_relu_23)
        self.module_24 = py_nndct.nn.Conv2d(in_channels=192, out_channels=96, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Conv[cv1]/Conv2d[conv]/ret.29(DetectMultiBackend::nndct_conv2d_24)
        self.module_25 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Conv[cv1]/LeakyReLU[act]/14972(DetectMultiBackend::nndct_leaky_relu_25)
        self.module_26 = py_nndct.nn.Conv2d(in_channels=96, out_channels=96, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[0]/Conv[cv1]/Conv2d[conv]/ret.31(DetectMultiBackend::nndct_conv2d_26)
        self.module_27 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[0]/Conv[cv1]/LeakyReLU[act]/14994(DetectMultiBackend::nndct_leaky_relu_27)
        self.module_28 = py_nndct.nn.Conv2d(in_channels=96, out_channels=96, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[0]/Conv[cv2]/Conv2d[conv]/ret.33(DetectMultiBackend::nndct_conv2d_28)
        self.module_29 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[0]/Conv[cv2]/LeakyReLU[act]/15016(DetectMultiBackend::nndct_leaky_relu_29)
        self.module_30 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[0]/ret.35(DetectMultiBackend::nndct_elemwise_add_30)
        self.module_31 = py_nndct.nn.Conv2d(in_channels=96, out_channels=96, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[1]/Conv[cv1]/Conv2d[conv]/ret.37(DetectMultiBackend::nndct_conv2d_31)
        self.module_32 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[1]/Conv[cv1]/LeakyReLU[act]/15041(DetectMultiBackend::nndct_leaky_relu_32)
        self.module_33 = py_nndct.nn.Conv2d(in_channels=96, out_channels=96, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[1]/Conv[cv2]/Conv2d[conv]/ret.39(DetectMultiBackend::nndct_conv2d_33)
        self.module_34 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[1]/Conv[cv2]/LeakyReLU[act]/15063(DetectMultiBackend::nndct_leaky_relu_34)
        self.module_35 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[1]/ret.41(DetectMultiBackend::nndct_elemwise_add_35)
        self.module_36 = py_nndct.nn.Conv2d(in_channels=96, out_channels=96, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[2]/Conv[cv1]/Conv2d[conv]/ret.43(DetectMultiBackend::nndct_conv2d_36)
        self.module_37 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[2]/Conv[cv1]/LeakyReLU[act]/15088(DetectMultiBackend::nndct_leaky_relu_37)
        self.module_38 = py_nndct.nn.Conv2d(in_channels=96, out_channels=96, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[2]/Conv[cv2]/Conv2d[conv]/ret.45(DetectMultiBackend::nndct_conv2d_38)
        self.module_39 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[2]/Conv[cv2]/LeakyReLU[act]/15110(DetectMultiBackend::nndct_leaky_relu_39)
        self.module_40 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[2]/ret.47(DetectMultiBackend::nndct_elemwise_add_40)
        self.module_41 = py_nndct.nn.Conv2d(in_channels=96, out_channels=96, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[3]/Conv[cv1]/Conv2d[conv]/ret.49(DetectMultiBackend::nndct_conv2d_41)
        self.module_42 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[3]/Conv[cv1]/LeakyReLU[act]/15135(DetectMultiBackend::nndct_leaky_relu_42)
        self.module_43 = py_nndct.nn.Conv2d(in_channels=96, out_channels=96, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[3]/Conv[cv2]/Conv2d[conv]/ret.51(DetectMultiBackend::nndct_conv2d_43)
        self.module_44 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[3]/Conv[cv2]/LeakyReLU[act]/15157(DetectMultiBackend::nndct_leaky_relu_44)
        self.module_45 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[3]/ret.53(DetectMultiBackend::nndct_elemwise_add_45)
        self.module_46 = py_nndct.nn.Conv2d(in_channels=192, out_channels=96, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Conv[cv2]/Conv2d[conv]/ret.55(DetectMultiBackend::nndct_conv2d_46)
        self.module_47 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Conv[cv2]/LeakyReLU[act]/15182(DetectMultiBackend::nndct_leaky_relu_47)
        self.module_48 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/ret.57(DetectMultiBackend::nndct_concat_48)
        self.module_49 = py_nndct.nn.Conv2d(in_channels=192, out_channels=192, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Conv[cv3]/Conv2d[conv]/ret.59(DetectMultiBackend::nndct_conv2d_49)
        self.module_50 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Conv[cv3]/LeakyReLU[act]/15208(DetectMultiBackend::nndct_leaky_relu_50)
        self.module_51 = py_nndct.nn.Conv2d(in_channels=192, out_channels=384, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[5]/Conv2d[conv]/ret.61(DetectMultiBackend::nndct_conv2d_51)
        self.module_52 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[5]/LeakyReLU[act]/15230(DetectMultiBackend::nndct_leaky_relu_52)
        self.module_53 = py_nndct.nn.Conv2d(in_channels=384, out_channels=192, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Conv[cv1]/Conv2d[conv]/ret.63(DetectMultiBackend::nndct_conv2d_53)
        self.module_54 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Conv[cv1]/LeakyReLU[act]/15252(DetectMultiBackend::nndct_leaky_relu_54)
        self.module_55 = py_nndct.nn.Conv2d(in_channels=192, out_channels=192, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[0]/Conv[cv1]/Conv2d[conv]/ret.65(DetectMultiBackend::nndct_conv2d_55)
        self.module_56 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[0]/Conv[cv1]/LeakyReLU[act]/15274(DetectMultiBackend::nndct_leaky_relu_56)
        self.module_57 = py_nndct.nn.Conv2d(in_channels=192, out_channels=192, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[0]/Conv[cv2]/Conv2d[conv]/ret.67(DetectMultiBackend::nndct_conv2d_57)
        self.module_58 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[0]/Conv[cv2]/LeakyReLU[act]/15296(DetectMultiBackend::nndct_leaky_relu_58)
        self.module_59 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[0]/ret.69(DetectMultiBackend::nndct_elemwise_add_59)
        self.module_60 = py_nndct.nn.Conv2d(in_channels=192, out_channels=192, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[1]/Conv[cv1]/Conv2d[conv]/ret.71(DetectMultiBackend::nndct_conv2d_60)
        self.module_61 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[1]/Conv[cv1]/LeakyReLU[act]/15321(DetectMultiBackend::nndct_leaky_relu_61)
        self.module_62 = py_nndct.nn.Conv2d(in_channels=192, out_channels=192, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[1]/Conv[cv2]/Conv2d[conv]/ret.73(DetectMultiBackend::nndct_conv2d_62)
        self.module_63 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[1]/Conv[cv2]/LeakyReLU[act]/15343(DetectMultiBackend::nndct_leaky_relu_63)
        self.module_64 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[1]/ret.75(DetectMultiBackend::nndct_elemwise_add_64)
        self.module_65 = py_nndct.nn.Conv2d(in_channels=192, out_channels=192, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[2]/Conv[cv1]/Conv2d[conv]/ret.77(DetectMultiBackend::nndct_conv2d_65)
        self.module_66 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[2]/Conv[cv1]/LeakyReLU[act]/15368(DetectMultiBackend::nndct_leaky_relu_66)
        self.module_67 = py_nndct.nn.Conv2d(in_channels=192, out_channels=192, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[2]/Conv[cv2]/Conv2d[conv]/ret.79(DetectMultiBackend::nndct_conv2d_67)
        self.module_68 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[2]/Conv[cv2]/LeakyReLU[act]/15390(DetectMultiBackend::nndct_leaky_relu_68)
        self.module_69 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[2]/ret.81(DetectMultiBackend::nndct_elemwise_add_69)
        self.module_70 = py_nndct.nn.Conv2d(in_channels=192, out_channels=192, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[3]/Conv[cv1]/Conv2d[conv]/ret.83(DetectMultiBackend::nndct_conv2d_70)
        self.module_71 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[3]/Conv[cv1]/LeakyReLU[act]/15415(DetectMultiBackend::nndct_leaky_relu_71)
        self.module_72 = py_nndct.nn.Conv2d(in_channels=192, out_channels=192, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[3]/Conv[cv2]/Conv2d[conv]/ret.85(DetectMultiBackend::nndct_conv2d_72)
        self.module_73 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[3]/Conv[cv2]/LeakyReLU[act]/15437(DetectMultiBackend::nndct_leaky_relu_73)
        self.module_74 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[3]/ret.87(DetectMultiBackend::nndct_elemwise_add_74)
        self.module_75 = py_nndct.nn.Conv2d(in_channels=192, out_channels=192, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[4]/Conv[cv1]/Conv2d[conv]/ret.89(DetectMultiBackend::nndct_conv2d_75)
        self.module_76 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[4]/Conv[cv1]/LeakyReLU[act]/15462(DetectMultiBackend::nndct_leaky_relu_76)
        self.module_77 = py_nndct.nn.Conv2d(in_channels=192, out_channels=192, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[4]/Conv[cv2]/Conv2d[conv]/ret.91(DetectMultiBackend::nndct_conv2d_77)
        self.module_78 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[4]/Conv[cv2]/LeakyReLU[act]/15484(DetectMultiBackend::nndct_leaky_relu_78)
        self.module_79 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[4]/ret.93(DetectMultiBackend::nndct_elemwise_add_79)
        self.module_80 = py_nndct.nn.Conv2d(in_channels=192, out_channels=192, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[5]/Conv[cv1]/Conv2d[conv]/ret.95(DetectMultiBackend::nndct_conv2d_80)
        self.module_81 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[5]/Conv[cv1]/LeakyReLU[act]/15509(DetectMultiBackend::nndct_leaky_relu_81)
        self.module_82 = py_nndct.nn.Conv2d(in_channels=192, out_channels=192, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[5]/Conv[cv2]/Conv2d[conv]/ret.97(DetectMultiBackend::nndct_conv2d_82)
        self.module_83 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[5]/Conv[cv2]/LeakyReLU[act]/15531(DetectMultiBackend::nndct_leaky_relu_83)
        self.module_84 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[5]/ret.99(DetectMultiBackend::nndct_elemwise_add_84)
        self.module_85 = py_nndct.nn.Conv2d(in_channels=384, out_channels=192, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Conv[cv2]/Conv2d[conv]/ret.101(DetectMultiBackend::nndct_conv2d_85)
        self.module_86 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Conv[cv2]/LeakyReLU[act]/15556(DetectMultiBackend::nndct_leaky_relu_86)
        self.module_87 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/ret.103(DetectMultiBackend::nndct_concat_87)
        self.module_88 = py_nndct.nn.Conv2d(in_channels=384, out_channels=384, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Conv[cv3]/Conv2d[conv]/ret.105(DetectMultiBackend::nndct_conv2d_88)
        self.module_89 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Conv[cv3]/LeakyReLU[act]/15582(DetectMultiBackend::nndct_leaky_relu_89)
        self.module_90 = py_nndct.nn.Conv2d(in_channels=384, out_channels=768, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[7]/Conv2d[conv]/ret.107(DetectMultiBackend::nndct_conv2d_90)
        self.module_91 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[7]/LeakyReLU[act]/15604(DetectMultiBackend::nndct_leaky_relu_91)
        self.module_92 = py_nndct.nn.Conv2d(in_channels=768, out_channels=384, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Conv[cv1]/Conv2d[conv]/ret.109(DetectMultiBackend::nndct_conv2d_92)
        self.module_93 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Conv[cv1]/LeakyReLU[act]/15626(DetectMultiBackend::nndct_leaky_relu_93)
        self.module_94 = py_nndct.nn.Conv2d(in_channels=384, out_channels=384, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Sequential[m]/Bottleneck[0]/Conv[cv1]/Conv2d[conv]/ret.111(DetectMultiBackend::nndct_conv2d_94)
        self.module_95 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Sequential[m]/Bottleneck[0]/Conv[cv1]/LeakyReLU[act]/15648(DetectMultiBackend::nndct_leaky_relu_95)
        self.module_96 = py_nndct.nn.Conv2d(in_channels=384, out_channels=384, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Sequential[m]/Bottleneck[0]/Conv[cv2]/Conv2d[conv]/ret.113(DetectMultiBackend::nndct_conv2d_96)
        self.module_97 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Sequential[m]/Bottleneck[0]/Conv[cv2]/LeakyReLU[act]/15670(DetectMultiBackend::nndct_leaky_relu_97)
        self.module_98 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Sequential[m]/Bottleneck[0]/ret.115(DetectMultiBackend::nndct_elemwise_add_98)
        self.module_99 = py_nndct.nn.Conv2d(in_channels=384, out_channels=384, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Sequential[m]/Bottleneck[1]/Conv[cv1]/Conv2d[conv]/ret.117(DetectMultiBackend::nndct_conv2d_99)
        self.module_100 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Sequential[m]/Bottleneck[1]/Conv[cv1]/LeakyReLU[act]/15695(DetectMultiBackend::nndct_leaky_relu_100)
        self.module_101 = py_nndct.nn.Conv2d(in_channels=384, out_channels=384, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Sequential[m]/Bottleneck[1]/Conv[cv2]/Conv2d[conv]/ret.119(DetectMultiBackend::nndct_conv2d_101)
        self.module_102 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Sequential[m]/Bottleneck[1]/Conv[cv2]/LeakyReLU[act]/15717(DetectMultiBackend::nndct_leaky_relu_102)
        self.module_103 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Sequential[m]/Bottleneck[1]/ret.121(DetectMultiBackend::nndct_elemwise_add_103)
        self.module_104 = py_nndct.nn.Conv2d(in_channels=768, out_channels=384, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Conv[cv2]/Conv2d[conv]/ret.123(DetectMultiBackend::nndct_conv2d_104)
        self.module_105 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Conv[cv2]/LeakyReLU[act]/15742(DetectMultiBackend::nndct_leaky_relu_105)
        self.module_106 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/ret.125(DetectMultiBackend::nndct_concat_106)
        self.module_107 = py_nndct.nn.Conv2d(in_channels=768, out_channels=768, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Conv[cv3]/Conv2d[conv]/ret.127(DetectMultiBackend::nndct_conv2d_107)
        self.module_108 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Conv[cv3]/LeakyReLU[act]/15768(DetectMultiBackend::nndct_leaky_relu_108)
        self.module_109 = py_nndct.nn.Conv2d(in_channels=768, out_channels=384, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/SPPF[model]/SPPF[9]/Conv[cv1]/Conv2d[conv]/ret.129(DetectMultiBackend::nndct_conv2d_109)
        self.module_110 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/SPPF[model]/SPPF[9]/Conv[cv1]/LeakyReLU[act]/15790(DetectMultiBackend::nndct_leaky_relu_110)
        self.module_111 = py_nndct.nn.MaxPool2d(kernel_size=[5, 5], stride=[1, 1], padding=[2, 2], dilation=[1, 1], ceil_mode=False) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/SPPF[model]/SPPF[9]/MaxPool2d[m]/15805(DetectMultiBackend::nndct_maxpool_111)
        self.module_112 = py_nndct.nn.MaxPool2d(kernel_size=[5, 5], stride=[1, 1], padding=[2, 2], dilation=[1, 1], ceil_mode=False) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/SPPF[model]/SPPF[9]/MaxPool2d[m]/15821(DetectMultiBackend::nndct_maxpool_112)
        self.module_113 = py_nndct.nn.MaxPool2d(kernel_size=[5, 5], stride=[1, 1], padding=[2, 2], dilation=[1, 1], ceil_mode=False) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/SPPF[model]/SPPF[9]/MaxPool2d[m]/15837(DetectMultiBackend::nndct_maxpool_113)
        self.module_114 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/SPPF[model]/SPPF[9]/ret.131(DetectMultiBackend::nndct_concat_114)
        self.module_115 = py_nndct.nn.Conv2d(in_channels=1536, out_channels=768, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/SPPF[model]/SPPF[9]/Conv[cv2]/Conv2d[conv]/ret.133(DetectMultiBackend::nndct_conv2d_115)
        self.module_116 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/SPPF[model]/SPPF[9]/Conv[cv2]/LeakyReLU[act]/15864(DetectMultiBackend::nndct_leaky_relu_116)
        self.module_117 = py_nndct.nn.Conv2d(in_channels=768, out_channels=384, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[10]/Conv2d[conv]/ret.135(DetectMultiBackend::nndct_conv2d_117)
        self.module_118 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[10]/LeakyReLU[act]/15886(DetectMultiBackend::nndct_leaky_relu_118)
        self.module_119 = py_nndct.nn.Interpolate() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Upsample[model]/Upsample[11]/ret.137(DetectMultiBackend::nndct_resize_119)
        self.module_120 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Concat[model]/Concat[12]/ret.139(DetectMultiBackend::nndct_concat_120)
        self.module_121 = py_nndct.nn.Conv2d(in_channels=768, out_channels=192, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Conv[cv1]/Conv2d[conv]/ret.141(DetectMultiBackend::nndct_conv2d_121)
        self.module_122 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Conv[cv1]/LeakyReLU[act]/15918(DetectMultiBackend::nndct_leaky_relu_122)
        self.module_123 = py_nndct.nn.Conv2d(in_channels=192, out_channels=192, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Sequential[m]/Bottleneck[0]/Conv[cv1]/Conv2d[conv]/ret.143(DetectMultiBackend::nndct_conv2d_123)
        self.module_124 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Sequential[m]/Bottleneck[0]/Conv[cv1]/LeakyReLU[act]/15940(DetectMultiBackend::nndct_leaky_relu_124)
        self.module_125 = py_nndct.nn.Conv2d(in_channels=192, out_channels=192, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Sequential[m]/Bottleneck[0]/Conv[cv2]/Conv2d[conv]/ret.145(DetectMultiBackend::nndct_conv2d_125)
        self.module_126 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Sequential[m]/Bottleneck[0]/Conv[cv2]/LeakyReLU[act]/15962(DetectMultiBackend::nndct_leaky_relu_126)
        self.module_127 = py_nndct.nn.Conv2d(in_channels=192, out_channels=192, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Sequential[m]/Bottleneck[1]/Conv[cv1]/Conv2d[conv]/ret.147(DetectMultiBackend::nndct_conv2d_127)
        self.module_128 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Sequential[m]/Bottleneck[1]/Conv[cv1]/LeakyReLU[act]/15984(DetectMultiBackend::nndct_leaky_relu_128)
        self.module_129 = py_nndct.nn.Conv2d(in_channels=192, out_channels=192, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Sequential[m]/Bottleneck[1]/Conv[cv2]/Conv2d[conv]/ret.149(DetectMultiBackend::nndct_conv2d_129)
        self.module_130 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Sequential[m]/Bottleneck[1]/Conv[cv2]/LeakyReLU[act]/16006(DetectMultiBackend::nndct_leaky_relu_130)
        self.module_131 = py_nndct.nn.Conv2d(in_channels=768, out_channels=192, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Conv[cv2]/Conv2d[conv]/ret.151(DetectMultiBackend::nndct_conv2d_131)
        self.module_132 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Conv[cv2]/LeakyReLU[act]/16028(DetectMultiBackend::nndct_leaky_relu_132)
        self.module_133 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/ret.153(DetectMultiBackend::nndct_concat_133)
        self.module_134 = py_nndct.nn.Conv2d(in_channels=384, out_channels=384, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Conv[cv3]/Conv2d[conv]/ret.155(DetectMultiBackend::nndct_conv2d_134)
        self.module_135 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Conv[cv3]/LeakyReLU[act]/16054(DetectMultiBackend::nndct_leaky_relu_135)
        self.module_136 = py_nndct.nn.Conv2d(in_channels=384, out_channels=192, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[14]/Conv2d[conv]/ret.157(DetectMultiBackend::nndct_conv2d_136)
        self.module_137 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[14]/LeakyReLU[act]/16076(DetectMultiBackend::nndct_leaky_relu_137)
        self.module_138 = py_nndct.nn.Interpolate() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Upsample[model]/Upsample[15]/ret.159(DetectMultiBackend::nndct_resize_138)
        self.module_139 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Concat[model]/Concat[16]/ret.161(DetectMultiBackend::nndct_concat_139)
        self.module_140 = py_nndct.nn.Conv2d(in_channels=384, out_channels=96, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Conv[cv1]/Conv2d[conv]/ret.163(DetectMultiBackend::nndct_conv2d_140)
        self.module_141 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Conv[cv1]/LeakyReLU[act]/16108(DetectMultiBackend::nndct_leaky_relu_141)
        self.module_142 = py_nndct.nn.Conv2d(in_channels=96, out_channels=96, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Sequential[m]/Bottleneck[0]/Conv[cv1]/Conv2d[conv]/ret.165(DetectMultiBackend::nndct_conv2d_142)
        self.module_143 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Sequential[m]/Bottleneck[0]/Conv[cv1]/LeakyReLU[act]/16130(DetectMultiBackend::nndct_leaky_relu_143)
        self.module_144 = py_nndct.nn.Conv2d(in_channels=96, out_channels=96, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Sequential[m]/Bottleneck[0]/Conv[cv2]/Conv2d[conv]/ret.167(DetectMultiBackend::nndct_conv2d_144)
        self.module_145 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Sequential[m]/Bottleneck[0]/Conv[cv2]/LeakyReLU[act]/16152(DetectMultiBackend::nndct_leaky_relu_145)
        self.module_146 = py_nndct.nn.Conv2d(in_channels=96, out_channels=96, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Sequential[m]/Bottleneck[1]/Conv[cv1]/Conv2d[conv]/ret.169(DetectMultiBackend::nndct_conv2d_146)
        self.module_147 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Sequential[m]/Bottleneck[1]/Conv[cv1]/LeakyReLU[act]/16174(DetectMultiBackend::nndct_leaky_relu_147)
        self.module_148 = py_nndct.nn.Conv2d(in_channels=96, out_channels=96, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Sequential[m]/Bottleneck[1]/Conv[cv2]/Conv2d[conv]/ret.171(DetectMultiBackend::nndct_conv2d_148)
        self.module_149 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Sequential[m]/Bottleneck[1]/Conv[cv2]/LeakyReLU[act]/16196(DetectMultiBackend::nndct_leaky_relu_149)
        self.module_150 = py_nndct.nn.Conv2d(in_channels=384, out_channels=96, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Conv[cv2]/Conv2d[conv]/ret.173(DetectMultiBackend::nndct_conv2d_150)
        self.module_151 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Conv[cv2]/LeakyReLU[act]/16218(DetectMultiBackend::nndct_leaky_relu_151)
        self.module_152 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/ret.175(DetectMultiBackend::nndct_concat_152)
        self.module_153 = py_nndct.nn.Conv2d(in_channels=192, out_channels=192, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Conv[cv3]/Conv2d[conv]/ret.177(DetectMultiBackend::nndct_conv2d_153)
        self.module_154 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Conv[cv3]/LeakyReLU[act]/16244(DetectMultiBackend::nndct_leaky_relu_154)
        self.module_155 = py_nndct.nn.Conv2d(in_channels=192, out_channels=192, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[18]/Conv2d[conv]/ret.179(DetectMultiBackend::nndct_conv2d_155)
        self.module_156 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[18]/LeakyReLU[act]/16266(DetectMultiBackend::nndct_leaky_relu_156)
        self.module_157 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Concat[model]/Concat[19]/ret.181(DetectMultiBackend::nndct_concat_157)
        self.module_158 = py_nndct.nn.Conv2d(in_channels=384, out_channels=192, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Conv[cv1]/Conv2d[conv]/ret.183(DetectMultiBackend::nndct_conv2d_158)
        self.module_159 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Conv[cv1]/LeakyReLU[act]/16292(DetectMultiBackend::nndct_leaky_relu_159)
        self.module_160 = py_nndct.nn.Conv2d(in_channels=192, out_channels=192, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Sequential[m]/Bottleneck[0]/Conv[cv1]/Conv2d[conv]/ret.185(DetectMultiBackend::nndct_conv2d_160)
        self.module_161 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Sequential[m]/Bottleneck[0]/Conv[cv1]/LeakyReLU[act]/16314(DetectMultiBackend::nndct_leaky_relu_161)
        self.module_162 = py_nndct.nn.Conv2d(in_channels=192, out_channels=192, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Sequential[m]/Bottleneck[0]/Conv[cv2]/Conv2d[conv]/ret.187(DetectMultiBackend::nndct_conv2d_162)
        self.module_163 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Sequential[m]/Bottleneck[0]/Conv[cv2]/LeakyReLU[act]/16336(DetectMultiBackend::nndct_leaky_relu_163)
        self.module_164 = py_nndct.nn.Conv2d(in_channels=192, out_channels=192, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Sequential[m]/Bottleneck[1]/Conv[cv1]/Conv2d[conv]/ret.189(DetectMultiBackend::nndct_conv2d_164)
        self.module_165 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Sequential[m]/Bottleneck[1]/Conv[cv1]/LeakyReLU[act]/16358(DetectMultiBackend::nndct_leaky_relu_165)
        self.module_166 = py_nndct.nn.Conv2d(in_channels=192, out_channels=192, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Sequential[m]/Bottleneck[1]/Conv[cv2]/Conv2d[conv]/ret.191(DetectMultiBackend::nndct_conv2d_166)
        self.module_167 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Sequential[m]/Bottleneck[1]/Conv[cv2]/LeakyReLU[act]/16380(DetectMultiBackend::nndct_leaky_relu_167)
        self.module_168 = py_nndct.nn.Conv2d(in_channels=384, out_channels=192, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Conv[cv2]/Conv2d[conv]/ret.193(DetectMultiBackend::nndct_conv2d_168)
        self.module_169 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Conv[cv2]/LeakyReLU[act]/16402(DetectMultiBackend::nndct_leaky_relu_169)
        self.module_170 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/ret.195(DetectMultiBackend::nndct_concat_170)
        self.module_171 = py_nndct.nn.Conv2d(in_channels=384, out_channels=384, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Conv[cv3]/Conv2d[conv]/ret.197(DetectMultiBackend::nndct_conv2d_171)
        self.module_172 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Conv[cv3]/LeakyReLU[act]/16428(DetectMultiBackend::nndct_leaky_relu_172)
        self.module_173 = py_nndct.nn.Conv2d(in_channels=384, out_channels=384, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[21]/Conv2d[conv]/ret.199(DetectMultiBackend::nndct_conv2d_173)
        self.module_174 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[21]/LeakyReLU[act]/16450(DetectMultiBackend::nndct_leaky_relu_174)
        self.module_175 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Concat[model]/Concat[22]/ret.201(DetectMultiBackend::nndct_concat_175)
        self.module_176 = py_nndct.nn.Conv2d(in_channels=768, out_channels=384, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Conv[cv1]/Conv2d[conv]/ret.203(DetectMultiBackend::nndct_conv2d_176)
        self.module_177 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Conv[cv1]/LeakyReLU[act]/16476(DetectMultiBackend::nndct_leaky_relu_177)
        self.module_178 = py_nndct.nn.Conv2d(in_channels=384, out_channels=384, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Sequential[m]/Bottleneck[0]/Conv[cv1]/Conv2d[conv]/ret.205(DetectMultiBackend::nndct_conv2d_178)
        self.module_179 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Sequential[m]/Bottleneck[0]/Conv[cv1]/LeakyReLU[act]/16498(DetectMultiBackend::nndct_leaky_relu_179)
        self.module_180 = py_nndct.nn.Conv2d(in_channels=384, out_channels=384, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Sequential[m]/Bottleneck[0]/Conv[cv2]/Conv2d[conv]/ret.207(DetectMultiBackend::nndct_conv2d_180)
        self.module_181 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Sequential[m]/Bottleneck[0]/Conv[cv2]/LeakyReLU[act]/16520(DetectMultiBackend::nndct_leaky_relu_181)
        self.module_182 = py_nndct.nn.Conv2d(in_channels=384, out_channels=384, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Sequential[m]/Bottleneck[1]/Conv[cv1]/Conv2d[conv]/ret.209(DetectMultiBackend::nndct_conv2d_182)
        self.module_183 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Sequential[m]/Bottleneck[1]/Conv[cv1]/LeakyReLU[act]/16542(DetectMultiBackend::nndct_leaky_relu_183)
        self.module_184 = py_nndct.nn.Conv2d(in_channels=384, out_channels=384, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Sequential[m]/Bottleneck[1]/Conv[cv2]/Conv2d[conv]/ret.211(DetectMultiBackend::nndct_conv2d_184)
        self.module_185 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Sequential[m]/Bottleneck[1]/Conv[cv2]/LeakyReLU[act]/16564(DetectMultiBackend::nndct_leaky_relu_185)
        self.module_186 = py_nndct.nn.Conv2d(in_channels=768, out_channels=384, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Conv[cv2]/Conv2d[conv]/ret.213(DetectMultiBackend::nndct_conv2d_186)
        self.module_187 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Conv[cv2]/LeakyReLU[act]/16586(DetectMultiBackend::nndct_leaky_relu_187)
        self.module_188 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/ret.215(DetectMultiBackend::nndct_concat_188)
        self.module_189 = py_nndct.nn.Conv2d(in_channels=768, out_channels=768, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Conv[cv3]/Conv2d[conv]/ret.217(DetectMultiBackend::nndct_conv2d_189)
        self.module_190 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Conv[cv3]/LeakyReLU[act]/16612(DetectMultiBackend::nndct_leaky_relu_190)
        self.module_191 = py_nndct.nn.Conv2d(in_channels=192, out_channels=18, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/Conv2d[m]/ModuleList[0]/ret.219(DetectMultiBackend::nndct_conv2d_191)
        self.module_192 = py_nndct.nn.Conv2d(in_channels=384, out_channels=18, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/Conv2d[m]/ModuleList[1]/ret.225(DetectMultiBackend::nndct_conv2d_192)
        self.module_193 = py_nndct.nn.Conv2d(in_channels=768, out_channels=18, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/Conv2d[m]/ModuleList[2]/ret.231(DetectMultiBackend::nndct_conv2d_193)

    @py_nndct.nn.forward_processor
    def forward(self, *args):
        output_module_0 = self.module_0(input=args[0])
        output_module_0 = self.module_1(output_module_0)
        output_module_0 = self.module_2(output_module_0)
        output_module_0 = self.module_3(output_module_0)
        output_module_0 = self.module_4(output_module_0)
        output_module_5 = self.module_5(output_module_0)
        output_module_5 = self.module_6(output_module_5)
        output_module_7 = self.module_7(output_module_5)
        output_module_7 = self.module_8(output_module_7)
        output_module_7 = self.module_9(output_module_7)
        output_module_7 = self.module_10(output_module_7)
        output_module_11 = self.module_11(input=output_module_5, other=output_module_7, alpha=1)
        output_module_12 = self.module_12(output_module_11)
        output_module_12 = self.module_13(output_module_12)
        output_module_12 = self.module_14(output_module_12)
        output_module_12 = self.module_15(output_module_12)
        output_module_16 = self.module_16(input=output_module_11, other=output_module_12, alpha=1)
        output_module_17 = self.module_17(output_module_0)
        output_module_17 = self.module_18(output_module_17)
        output_module_16 = self.module_19(dim=1, tensors=[output_module_16,output_module_17])
        output_module_16 = self.module_20(output_module_16)
        output_module_16 = self.module_21(output_module_16)
        output_module_16 = self.module_22(output_module_16)
        output_module_16 = self.module_23(output_module_16)
        output_module_24 = self.module_24(output_module_16)
        output_module_24 = self.module_25(output_module_24)
        output_module_26 = self.module_26(output_module_24)
        output_module_26 = self.module_27(output_module_26)
        output_module_26 = self.module_28(output_module_26)
        output_module_26 = self.module_29(output_module_26)
        output_module_30 = self.module_30(input=output_module_24, other=output_module_26, alpha=1)
        output_module_31 = self.module_31(output_module_30)
        output_module_31 = self.module_32(output_module_31)
        output_module_31 = self.module_33(output_module_31)
        output_module_31 = self.module_34(output_module_31)
        output_module_35 = self.module_35(input=output_module_30, other=output_module_31, alpha=1)
        output_module_36 = self.module_36(output_module_35)
        output_module_36 = self.module_37(output_module_36)
        output_module_36 = self.module_38(output_module_36)
        output_module_36 = self.module_39(output_module_36)
        output_module_40 = self.module_40(input=output_module_35, other=output_module_36, alpha=1)
        output_module_41 = self.module_41(output_module_40)
        output_module_41 = self.module_42(output_module_41)
        output_module_41 = self.module_43(output_module_41)
        output_module_41 = self.module_44(output_module_41)
        output_module_45 = self.module_45(input=output_module_40, other=output_module_41, alpha=1)
        output_module_46 = self.module_46(output_module_16)
        output_module_46 = self.module_47(output_module_46)
        output_module_45 = self.module_48(dim=1, tensors=[output_module_45,output_module_46])
        output_module_45 = self.module_49(output_module_45)
        output_module_45 = self.module_50(output_module_45)
        output_module_51 = self.module_51(output_module_45)
        output_module_51 = self.module_52(output_module_51)
        output_module_53 = self.module_53(output_module_51)
        output_module_53 = self.module_54(output_module_53)
        output_module_55 = self.module_55(output_module_53)
        output_module_55 = self.module_56(output_module_55)
        output_module_55 = self.module_57(output_module_55)
        output_module_55 = self.module_58(output_module_55)
        output_module_59 = self.module_59(input=output_module_53, other=output_module_55, alpha=1)
        output_module_60 = self.module_60(output_module_59)
        output_module_60 = self.module_61(output_module_60)
        output_module_60 = self.module_62(output_module_60)
        output_module_60 = self.module_63(output_module_60)
        output_module_64 = self.module_64(input=output_module_59, other=output_module_60, alpha=1)
        output_module_65 = self.module_65(output_module_64)
        output_module_65 = self.module_66(output_module_65)
        output_module_65 = self.module_67(output_module_65)
        output_module_65 = self.module_68(output_module_65)
        output_module_69 = self.module_69(input=output_module_64, other=output_module_65, alpha=1)
        output_module_70 = self.module_70(output_module_69)
        output_module_70 = self.module_71(output_module_70)
        output_module_70 = self.module_72(output_module_70)
        output_module_70 = self.module_73(output_module_70)
        output_module_74 = self.module_74(input=output_module_69, other=output_module_70, alpha=1)
        output_module_75 = self.module_75(output_module_74)
        output_module_75 = self.module_76(output_module_75)
        output_module_75 = self.module_77(output_module_75)
        output_module_75 = self.module_78(output_module_75)
        output_module_79 = self.module_79(input=output_module_74, other=output_module_75, alpha=1)
        output_module_80 = self.module_80(output_module_79)
        output_module_80 = self.module_81(output_module_80)
        output_module_80 = self.module_82(output_module_80)
        output_module_80 = self.module_83(output_module_80)
        output_module_84 = self.module_84(input=output_module_79, other=output_module_80, alpha=1)
        output_module_85 = self.module_85(output_module_51)
        output_module_85 = self.module_86(output_module_85)
        output_module_84 = self.module_87(dim=1, tensors=[output_module_84,output_module_85])
        output_module_84 = self.module_88(output_module_84)
        output_module_84 = self.module_89(output_module_84)
        output_module_90 = self.module_90(output_module_84)
        output_module_90 = self.module_91(output_module_90)
        output_module_92 = self.module_92(output_module_90)
        output_module_92 = self.module_93(output_module_92)
        output_module_94 = self.module_94(output_module_92)
        output_module_94 = self.module_95(output_module_94)
        output_module_94 = self.module_96(output_module_94)
        output_module_94 = self.module_97(output_module_94)
        output_module_98 = self.module_98(input=output_module_92, other=output_module_94, alpha=1)
        output_module_99 = self.module_99(output_module_98)
        output_module_99 = self.module_100(output_module_99)
        output_module_99 = self.module_101(output_module_99)
        output_module_99 = self.module_102(output_module_99)
        output_module_103 = self.module_103(input=output_module_98, other=output_module_99, alpha=1)
        output_module_104 = self.module_104(output_module_90)
        output_module_104 = self.module_105(output_module_104)
        output_module_103 = self.module_106(dim=1, tensors=[output_module_103,output_module_104])
        output_module_103 = self.module_107(output_module_103)
        output_module_103 = self.module_108(output_module_103)
        output_module_103 = self.module_109(output_module_103)
        output_module_103 = self.module_110(output_module_103)
        output_module_111 = self.module_111(output_module_103)
        output_module_112 = self.module_112(output_module_111)
        output_module_113 = self.module_113(output_module_112)
        output_module_114 = self.module_114(dim=1, tensors=[output_module_103,output_module_111,output_module_112,output_module_113])
        output_module_114 = self.module_115(output_module_114)
        output_module_114 = self.module_116(output_module_114)
        output_module_114 = self.module_117(output_module_114)
        output_module_114 = self.module_118(output_module_114)
        output_module_119 = self.module_119(input=output_module_114, size=None, scale_factor=[2.0,2.0], mode='nearest')
        output_module_119 = self.module_120(dim=1, tensors=[output_module_119,output_module_84])
        output_module_121 = self.module_121(output_module_119)
        output_module_121 = self.module_122(output_module_121)
        output_module_121 = self.module_123(output_module_121)
        output_module_121 = self.module_124(output_module_121)
        output_module_121 = self.module_125(output_module_121)
        output_module_121 = self.module_126(output_module_121)
        output_module_121 = self.module_127(output_module_121)
        output_module_121 = self.module_128(output_module_121)
        output_module_121 = self.module_129(output_module_121)
        output_module_121 = self.module_130(output_module_121)
        output_module_131 = self.module_131(output_module_119)
        output_module_131 = self.module_132(output_module_131)
        output_module_121 = self.module_133(dim=1, tensors=[output_module_121,output_module_131])
        output_module_121 = self.module_134(output_module_121)
        output_module_121 = self.module_135(output_module_121)
        output_module_121 = self.module_136(output_module_121)
        output_module_121 = self.module_137(output_module_121)
        output_module_138 = self.module_138(input=output_module_121, size=None, scale_factor=[2.0,2.0], mode='nearest')
        output_module_138 = self.module_139(dim=1, tensors=[output_module_138,output_module_45])
        output_module_140 = self.module_140(output_module_138)
        output_module_140 = self.module_141(output_module_140)
        output_module_140 = self.module_142(output_module_140)
        output_module_140 = self.module_143(output_module_140)
        output_module_140 = self.module_144(output_module_140)
        output_module_140 = self.module_145(output_module_140)
        output_module_140 = self.module_146(output_module_140)
        output_module_140 = self.module_147(output_module_140)
        output_module_140 = self.module_148(output_module_140)
        output_module_140 = self.module_149(output_module_140)
        output_module_150 = self.module_150(output_module_138)
        output_module_150 = self.module_151(output_module_150)
        output_module_140 = self.module_152(dim=1, tensors=[output_module_140,output_module_150])
        output_module_140 = self.module_153(output_module_140)
        output_module_140 = self.module_154(output_module_140)
        output_module_155 = self.module_155(output_module_140)
        output_module_155 = self.module_156(output_module_155)
        output_module_155 = self.module_157(dim=1, tensors=[output_module_155,output_module_121])
        output_module_158 = self.module_158(output_module_155)
        output_module_158 = self.module_159(output_module_158)
        output_module_158 = self.module_160(output_module_158)
        output_module_158 = self.module_161(output_module_158)
        output_module_158 = self.module_162(output_module_158)
        output_module_158 = self.module_163(output_module_158)
        output_module_158 = self.module_164(output_module_158)
        output_module_158 = self.module_165(output_module_158)
        output_module_158 = self.module_166(output_module_158)
        output_module_158 = self.module_167(output_module_158)
        output_module_168 = self.module_168(output_module_155)
        output_module_168 = self.module_169(output_module_168)
        output_module_158 = self.module_170(dim=1, tensors=[output_module_158,output_module_168])
        output_module_158 = self.module_171(output_module_158)
        output_module_158 = self.module_172(output_module_158)
        output_module_173 = self.module_173(output_module_158)
        output_module_173 = self.module_174(output_module_173)
        output_module_173 = self.module_175(dim=1, tensors=[output_module_173,output_module_114])
        output_module_176 = self.module_176(output_module_173)
        output_module_176 = self.module_177(output_module_176)
        output_module_176 = self.module_178(output_module_176)
        output_module_176 = self.module_179(output_module_176)
        output_module_176 = self.module_180(output_module_176)
        output_module_176 = self.module_181(output_module_176)
        output_module_176 = self.module_182(output_module_176)
        output_module_176 = self.module_183(output_module_176)
        output_module_176 = self.module_184(output_module_176)
        output_module_176 = self.module_185(output_module_176)
        output_module_186 = self.module_186(output_module_173)
        output_module_186 = self.module_187(output_module_186)
        output_module_176 = self.module_188(dim=1, tensors=[output_module_176,output_module_186])
        output_module_176 = self.module_189(output_module_176)
        output_module_176 = self.module_190(output_module_176)
        output_module_191 = self.module_191(output_module_140)
        output_module_192 = self.module_192(output_module_158)
        output_module_176 = self.module_193(output_module_176)
        return (output_module_191,output_module_192,output_module_176)
